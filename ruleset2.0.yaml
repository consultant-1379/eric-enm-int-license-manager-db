modelVersion: 2.0

description: "ENM: License Manager DB Group Pipeline"

docker:
  registry: https://armdocker.rnd.ericsson.se/proj-enm

docker-images:
  - adp-release-auto: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob-adp-release-auto:latest
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/common-library-adp-helm-dr-check:latest
  #- image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:latest
  - adp-release-cnbuild: armdocker.rnd.ericsson.se/proj_oss_releases/enm/adp-int-helm-chart-auto:latest
  - eric-enm-version-auto: armdocker.rnd.ericsson.se/proj-enm/eric-enm-version-auto:latest
  - cnbuild-build-utilities: armdocker.rnd.ericsson.se/proj-enm/cenm-build-utilities:latest

properties:
  - image-name: eric-enm-int-license-manager-db
  - image-repo: https://armdocker.rnd.ericsson.se/proj-enm
  - docker-image-path: armdocker.rnd.ericsson.se/proj-enm/${image-name}
  - docker-internal-image-path: armdocker.rnd.ericsson.se/proj_oss_releases/enm/${image-name}
  - helm-chart-name: eric-enm-int-license-manager-db
  - helm-chart-repo: https://arm.epk.ericsson.se/artifactory/proj-enm-helm/eric-enm-int-license-manager-db

env:
  - RELEASE (default=true)
  - HELM_REPO_TOKEN (default=https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-int-license-manager-db)
  - ISO_VERSION (default=1.0.5555)
  - BUILD_DATE (default=$(date +%d%m%Y-%H%M%S --utc))
  - AUTHOR_NAME
  - AUTHOR_EMAIL
  - GIT_COMMITTER_NAME
  - GIT_COMMITTER_EMAIL
  - NAMESPACE (default=eric-enm-int-license-manager-db-test)
  - INT_DB_CHART_REPO (default=https://arm.epk.ericsson.se/artifactory/proj-enm-helm-local)
  - INT_DB_CHART_VERSION (default=latest)
  - DOCUMENT_DB_VERSION (default=9.2.0-44)

var:
  - commit-hash
  - version
  - version-prefix
  - rstate
  #- image-dr-vm-args

rules:
  swap-latest-versions-with-numbers:
    - task: swap_versions
      docker-image: eric-enm-version-auto
      docker-flags:
        - "--env-file enm_artifact.properties"
      cmd: python /substitute_values.py
  clean:
    - task: rm-clean
      cmd:
        - rm -rf .bob/
        - rm -f artifact.properties

  generate-new-version:
    - task: generate-version
      docker-image: adp-release-auto
      cmd: generate-version -f VERSION_PREFIX --is-release ${env.RELEASE} --output version
    - task: set-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: generate-rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: get-commit-hash
      docker-image: adp-release-auto
      cmd: git rev-parse --short HEAD > .bob/var.commit-hash

  version:
    - task: echo
      cmd: echo ${var.version}

  build-image:
    - task: build-docker-image
      cmd:
        - docker build . --build-arg GIT_COMMIT=${var.commit-hash} --build-arg BUILD_DATE=${env.BUILD_DATE} --build-arg IMAGE_BUILD_VERSION=${var.version} --build-arg RSTATE=${var.rstate} --build-arg ISO_VERSION=${env.ISO_VERSION} --tag ${docker-image-path}:${var.version}

  build-image-with-all-tags:
    - task: build-docker-image-with-tags
      cmd:
        - docker build . --build-arg GIT_COMMIT=${var.commit-hash} --build-arg BUILD_DATE=${env.BUILD_DATE} --build-arg IMAGE_BUILD_VERSION=${var.version} --build-arg RSTATE=${var.rstate} --build-arg ISO_VERSION=${env.ISO_VERSION} --tag ${docker-image-path}:${var.version}
        - docker image tag ${docker-image-path}:${var.version} ${docker-image-path}:${var.version-prefix}-latest
        - docker image tag ${docker-image-path}:${var.version} ${docker-image-path}:latest
  push-image-with-all-tags:
    - task: push-docker-image
      cmd:
        - docker push ${docker-image-path}:${var.version}
        - docker push ${docker-image-path}:${var.version-prefix}-latest
        - docker push ${docker-image-path}:latest

  remove-image:
    - task: remove-docker-image
      cmd:
        - docker image remove ${docker-image-path}:${var.version}

  remove-image-with-all-tags:
    - task: remove-docker-image-with-tags
      cmd:
        - docker image remove ${docker-image-path}:${var.version}
        - docker image remove ${docker-image-path}:${var.version-prefix}-latest
        - docker image remove ${docker-image-path}:latest

  build-image-internal:
    - task: build-docker-image
      cmd:
        - docker build . --build-arg GIT_COMMIT=${var.commit-hash} --build-arg BUILD_DATE=${env.BUILD_DATE} --build-arg IMAGE_BUILD_VERSION=${var.version} --build-arg RSTATE=${var.rstate} --build-arg ISO_VERSION=${env.ISO_VERSION} --tag ${docker-internal-image-path}:${var.version}

  build-image-with-all-tags-internal:
    - task: build-docker-image-with-tags
      cmd:
        - docker build . --build-arg GIT_COMMIT=${var.commit-hash} --build-arg BUILD_DATE=${env.BUILD_DATE} --build-arg IMAGE_BUILD_VERSION=${var.version} --build-arg RSTATE=${var.rstate} --build-arg ISO_VERSION=${env.ISO_VERSION} --tag ${docker-internal-image-path}:${var.version}
        - docker image tag ${docker-internal-image-path}:${var.version} ${docker-internal-image-path}:${var.version-prefix}-latest
        - docker image tag ${docker-internal-image-path}:${var.version} ${docker-internal-image-path}:latest

  push-image-with-all-tags-internal:
    - task: push-docker-image
      cmd:
        - docker push ${docker-internal-image-path}:${var.version}
        - docker push ${docker-internal-image-path}:${var.version-prefix}-latest
        - docker push ${docker-internal-image-path}:latest

  remove-image-internal:
    - task: remove-docker-image
      cmd:
        - docker image remove ${docker-internal-image-path}:${var.version}

  remove-image-with-all-tags-internal:
    - task: remove-docker-image-with-tags
      cmd:
        - docker image remove ${docker-internal-image-path}:${var.version}
        - docker image remove ${docker-internal-image-path}:${var.version-prefix}-latest
        - docker image remove ${docker-internal-image-path}:latest

  lint-helm:
    - task: helm-lint
      docker-image: adp-release-auto
      cmd: helm lint chart/${helm-chart-name}

  helm-dr-check:
    - task: helm-chart-check
      description: Check design rules for license manager db templates
      docker-image: adp-helm-dr-check
      cmd: java -jar /helm-dr-check.jar --helm-chart chart/${helm-chart-name} --output .bob/dr-check/helm/

  # Run ADP container image design rule checker
  #- image-dr-check:
  #  - task: image-dr-vm-args
  #    cmd: echo "-DimageDesignRule.config.DR-D470203-050-A=skip" > .bob/var.image-dr-vm-args
  #  - task: check-image-dr
  #    description: Check design rules for license manager db management job
  #    docker-image: image-dr-check
  #    docker-in-docker: socket
  #    cmd:
  #      - image-dr-check
  #        --image ${docker-internal-image-path}:${var.version}
  #        --output .bob/dr-check/image/
  #        ${var.image-dr-vm-args}

  lint-dockerfile:
    - task: dockerfile-lint
      cmd:
        - docker run --rm -i hadolint/hadolint < Dockerfile | tee ./dockerfilelint.log

  build-helm:
    - task: helm-package
      docker-image: adp-release-auto
      cmd: helm-package --folder chart/${helm-chart-name} --version ${var.version} --replace VERSION=${var.version} --replace RSTATE=${var.rstate}

  push-helm:
    - task: push-helm
      docker-image: adp-release-auto
      cmd: upload_file.sh --filename=.bob/${helm-chart-name}-${var.version}.tgz --repository=${helm-chart-repo} --api-token=${env.HELM_REPO_TOKEN}

  generate-output-parameters:
    - task: generate-version
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts --chart-name ${helm-chart-name} --chart-repo ${helm-chart-repo} --chart-version ${var.version} --image-repo ${image-repo} --image-name ${image-name} --image-version ${var.version}

  generate-metadata-parameters:
    - task: generate-metadata-version
      docker-image: eric-enm-version-auto
      docker-flags:
        - "--env ISO_VERSION='${env.ISO_VERSION}'"
      cmd: python /generate-metadata-artifacts.py

  generate-output-parameters-internal-stage:
    - task: generate-version-internal
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts --chart-name ${helm-chart-name} --chart-repo ${helm-chart-repo} --chart-version ${var.version} --image-repo ${docker-internal-image-path} --image-name ${image-name} --image-version ${var.version}

  create-git-tag:
    - task: create-git-tag
      docker-image: adp-release-auto
      docker-flags:
        - "--env GIT_COMMITTER_NAME='${env.GIT_COMMITTER_NAME}'"
        - "--env GIT_COMMITTER_EMAIL='${env.GIT_COMMITTER_EMAIL}'"
      cmd: git tag --annotate ${var.version} --message "Build Version ${var.version} by ${env.AUTHOR_NAME} <${env.AUTHOR_EMAIL}>"

  remove-git-tag:
    - task: remove-git-tag
      docker-image: adp-release-auto
      cmd: git tag --delete ${var.version}

  create-namespace:
    - task: create-namespace
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -e -o pipefail -c "if kubectl get namespace ${env.NAMESPACE} &>/dev/null; then kubectl delete namespace ${env.NAMESPACE}; fi; kubectl create namespace ${env.NAMESPACE}"

  download-dependency-helm-charts:
    - task: download-document-database-helm-chart
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -c "helm repo add document-database-repo https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-adp-gs-all-helm/
           && helm fetch document-database-repo/eric-data-document-database-pg --version ${env.DOCUMENT_DB_VERSION}"

  install-dependency-helm-charts:
    - task: create-document-database-secrets
      docker-image: cnbuild-build-utilities
      docker-flags:
          - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl apply -f test/database-secret.yaml -n ${env.NAMESPACE}

    - task: install-document-database
      docker-image: cnbuild-build-utilities
      docker-flags:
          - "--env KUBECONFIG=.kube/admin.conf"
      cmd: helm install eric-data-document-database-pg -f test/database.yaml -n ${env.NAMESPACE} --wait --debug --timeout 1000s
          --set nameOverride=eric-lm-combined-server-db-pg
          eric-data-document-database-pg-${env.DOCUMENT_DB_VERSION}.tgz

  install-int-lm-db-chart:
    - task: install-int-lm-db
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd:  helm install eric-enm-int-license-manager-db-test -n ${env.NAMESPACE} --wait --debug  --timeout 600s
          --set database.credentials.secretName='db-credentials-secret'
          --set database.host='eric-lm-combined-server-db-pg'
          --set images.eric-enm-int-license-manager-db-wait.cmd='[ "bin/sh"\, "-c"\, "bash /var/tmp/check_service.sh -s eric-lm-combined-server-db-pg" ]'
          --set imageCredentials.licenseManagerDb.repoPath=proj_oss_releases/enm
          .bob/eric-enm-int-license-manager-db-${var.version}.tgz

  test-license-manager-db:
    - task: test-license-manager-db
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: kubectl get pods -n ${env.NAMESPACE} | grep eric-enm-int-license-manager-db-job | grep Completed

  delete-namespace:
    - task: delete-namespace
      docker-image: cnbuild-build-utilities
      docker-flags:
        - "--env KUBECONFIG=.kube/admin.conf"
      cmd: bash -e -o pipefail -c "if kubectl get namespace ${env.NAMESPACE} &>/dev/null; then kubectl delete namespace ${env.NAMESPACE}; fi;"

